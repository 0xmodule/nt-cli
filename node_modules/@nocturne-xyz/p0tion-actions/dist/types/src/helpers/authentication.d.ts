import { User, OAuthCredential } from "firebase/auth";
import { FirebaseApp } from "firebase/app";
/**
 * Sign in w/ OAuth 2.0 token.
 * @param firebaseApp <FirebaseApp> - the configured instance of the Firebase App in use.
 * @param credentials <OAuthCredential> - the OAuth credential generated from token exchange.
 */
export declare const signInToFirebaseWithCredentials: (firebaseApp: FirebaseApp, credentials: OAuthCredential) => Promise<import("@firebase/auth").UserCredential>;
/**
 * Return the current authenticated user in the given Firebase Application.
 * @param firebaseApp <FirebaseApp> - the configured instance of the Firebase App in use.
 * @returns <User> - the object containing the data about the current authenticated user in the given Firebase application.
 */
export declare const getCurrentFirebaseAuthUser: (firebaseApp: FirebaseApp) => User;
/**
 * Check if the user can claim to be a coordinator.
 * @param user <User> - the user to be checked.
 * @returns Promise<boolean> - true if the user is a coordinator, false otherwise.
 */
export declare const isCoordinator: (user: User) => Promise<boolean>;
//# sourceMappingURL=authentication.d.ts.map