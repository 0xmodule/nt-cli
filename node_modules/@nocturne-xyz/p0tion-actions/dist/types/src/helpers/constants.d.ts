export declare const potFileDownloadMainUrl = "https://hermez.s3-eu-west-1.amazonaws.com/";
export declare const potFilenameTemplate = "powersOfTau28_hez_final_";
export declare const genesisZkeyIndex = "00000";
export declare const numExpIterations = 10;
export declare const solidityVersion = "0.8.0";
export declare const finalContributionIndex = "final";
export declare const verificationKeyAcronym = "vkey";
export declare const verifierSmartContractAcronym = "verifier";
export declare const ec2InstanceTag = "p0tionec2instance";
export declare const vmBootstrapScriptFilename = "bootstrap.sh";
/**
 * Define the supported VM configuration types.
 * @dev the VM configurations can be retrieved at https://aws.amazon.com/ec2/instance-types/
 * The on-demand prices for the configurations can be retrieved at https://aws.amazon.com/ec2/pricing/on-demand/.
 * @notice the price has to be intended as on-demand hourly billing usage for Linux OS
 * VMs located in the us-east-1 region expressed in USD.
 */
export declare const vmConfigurationTypes: {
    t3_large: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    t3_2xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    c5_9xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    c5_18xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    c5a_8xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    c6id_32xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
    m6a_32xlarge: {
        type: string;
        ram: number;
        vcpu: number;
        pricePerHour: number;
    };
};
/**
 * Define the PPoT Trusted Setup ceremony output powers of tau files size (in GB).
 * @dev the powers of tau files can be retrieved at https://github.com/weijiekoh/perpetualpowersoftau
 */
export declare const powersOfTauFiles: {
    ref: string;
    size: number;
}[];
/**
 * Commonly used terms.
 * @dev useful for creating paths, references to collections and queries, object properties, folder names, and so on.
 */
export declare const commonTerms: {
    collections: {
        users: {
            name: string;
            fields: {
                creationTime: string;
                displayName: string;
                email: string;
                emailVerified: string;
                lastSignInTime: string;
                lastUpdated: string;
                name: string;
                photoURL: string;
            };
        };
        participants: {
            name: string;
            fields: {
                contributionProgress: string;
                contributionStartedAt: string;
                contributionStep: string;
                contributions: string;
                lastUpdated: string;
                status: string;
                verificationStartedAt: string;
            };
        };
        avatars: {
            name: string;
            fields: {
                avatarUrl: string;
            };
        };
        ceremonies: {
            name: string;
            fields: {
                coordinatorId: string;
                description: string;
                endDate: string;
                lastUpdated: string;
                penalty: string;
                prefix: string;
                startDate: string;
                state: string;
                timeoutType: string;
                title: string;
                type: string;
            };
        };
        circuits: {
            name: string;
            fields: {
                avgTimings: string;
                compiler: string;
                description: string;
                files: string;
                lastUpdated: string;
                metadata: string;
                name: string;
                prefix: string;
                sequencePosition: string;
                template: string;
                timeoutMaxContributionWaitingTime: string;
                waitingQueue: string;
                zKeySizeInBytes: string;
                verification: string;
            };
        };
        contributions: {
            name: string;
            fields: {
                contributionComputationTime: string;
                files: string;
                lastUpdated: string;
                participantId: string;
                valid: string;
                verificationComputationTime: string;
                zkeyIndex: string;
            };
        };
        timeouts: {
            name: string;
            fields: {
                type: string;
                startDate: string;
                endDate: string;
            };
        };
    };
    foldersAndPathsTerms: {
        output: string;
        setup: string;
        contribute: string;
        finalize: string;
        pot: string;
        zkeys: string;
        wasm: string;
        vkeys: string;
        metadata: string;
        transcripts: string;
        attestation: string;
        verifiers: string;
    };
    cloudFunctionsNames: {
        setupCeremony: string;
        checkParticipantForCeremony: string;
        progressToNextCircuitForContribution: string;
        resumeContributionAfterTimeoutExpiration: string;
        createBucket: string;
        generateGetObjectPreSignedUrl: string;
        progressToNextContributionStep: string;
        permanentlyStoreCurrentContributionTimeAndHash: string;
        startMultiPartUpload: string;
        temporaryStoreCurrentContributionMultiPartUploadId: string;
        temporaryStoreCurrentContributionUploadedChunkData: string;
        generatePreSignedUrlsParts: string;
        completeMultiPartUpload: string;
        checkIfObjectExist: string;
        verifyContribution: string;
        checkAndPrepareCoordinatorForFinalization: string;
        finalizeCircuit: string;
        finalizeCeremony: string;
        downloadCircuitArtifacts: string;
        transferObject: string;
    };
};
//# sourceMappingURL=constants.d.ts.map